--회원 정보 : 아이디, 비번, 예금주, 이메일, 전화번호
CREATE TABLE BANKMEMBERS (
    USERNAME VARCHAR2(200),
    PASSWORD VARCHAR2(200) CONSTRAINT BANKMEMBERS_PASSWORD_NN NOT NULL,
    NAME VARCHAR2(200) CONSTRAINT BANKMEMBERS_NAME_NN NOT NULL,
    EMAIL VARCHAR2(200) CONSTRAINT BANKMEMBERS_EMAIL_NN NOT NULL,
    PHONE VARCHAR2(200) CONSTRAINT BANKMEMBERS_PHONE_NN NOT NULL,
    --제약조건
    CONSTRAINT BANKMEMBERS_USERNAME_PK PRIMARY KEY (USERNAME),
    CONSTRAINT BANKMEMBERS_EMAIL_U UNIQUE (EMAIL),
    CONSTRAINT BANKMEMBERS_PHONE_U UNIQUE (PHONE)
)
--데이터 테스트
SELECT * FROM BANKMEMBERS;
DESC BANKMEMBERS;
INSERT INTO BANKMEMBERS
VALUES ('iu', '123', '아이유', 'iu@naver.com', '010-1111-1111')--정상적인 데이터
--제약조건 확인)
INSERT INTO BANKMEMBERS --Primary Key확인
VALUES ('iu', '123', '아이유', 'iu@naver.com', '010-1111-1111')
INSERT INTO BANKMEMBERS (USERNAME, NAME, EMAIL, PHONE) --NOT NULL확인 비번
VALUES ('GD', '지디', 'iu@naver.com','010-1111-1111')
INSERT INTO BANKMEMBERS (USERNAME, PASSWORD, EMAIL, PHONE) --NOT NULL확인 이름
VALUES ('GD', '123', 'iu@naver.com','010-1111-1111')
INSERT INTO BANKMEMBERS (USERNAME, PASSWORD, NAME, PHONE) --NOT NULL확인 이메일
VALUES ('GD', '123', '지디', '010-1111-1111')
INSERT INTO BANKMEMBERS (USERNAME, PASSWORD, NAME, EMAIL) --NOT NULL확인 폰
VALUES ('GD', '123', '지디', 'GD@naver.com')
INSERT INTO BANKMEMBERS (USERNAME, PASSWORD, NAME, EMAIL, PHONE) --UNIQUE확인 이메일
VALUES ('GD', '123', '지디', 'iu@naver.com','010-1111-1111')
INSERT INTO BANKMEMBERS (USERNAME, PASSWORD, NAME, EMAIL, PHONE) --UNIQUE확인 폰
VALUES ('GD', '123', '지디', 'GD@naver.com','010-1111-1111')

--통장 개설 정보 : 계좌번호, 회원의 아이디, 일련번호, 통장개설일 컬럼명 설정
CREATE TABLE BANKACCOUNT (
    ACCOUNTNUM NUMBER,
    USERNAME VARCHAR2(200),
    BOOKNUM NUMBER,
    ACCOUNTDATE DATE,
    --제약조건 이름 : 테이블명_컬럼명_제약조건의약칭
    CONSTRAINT BANKACCOUNT_ACCOUNTNUM_PK PRIMARY KEY (ACCOUNTNUM),
    CONSTRAINT BANKACCOUNT_USERNAME_FK FOREIGN KEY (USERNAME) REFERENCES BANKMEMBERS ON DELETE CASCADE,
    CONSTRAINT BANKACCOUNT_BOOKNUM_FK FOREIGN KEY (BOOKNUM) REFERENCES BANKBOOK
)

--통장정보 : 일련번호, 통장이름, 이자율, 판매여부
CREATE TABLE BANKBOOK (
    BOOKNUM NUMBER,
    BOOKNAME VARCHAR2(200),
    BOOKRATE NUMBER(4,2),
    BOOKSALE NUMBER(1) CHECK (BOOKSALE BETWEEN 0 AND 1),
    --제약조건
    CONSTRAINT BANKBOOK_BOOKNUM_PK PRIMARY KEY (BOOKNUM)
)

--거래내역 : 거래번호, 거래금액, 거래 후 잔액, 거래일, 입출금구분, 계좌번호
CREATE TABLE BANKTRADE (
    TRADENUM NUMBER,
    TRADEAMOUNT NUMBER,
    TRADEEBALANCE NUMBER,
    TRADEDATE DATE,
    TRADEIO NUMBER(1) CHECK (TRADEIO BETWEEN 0 AND 1),
    ACCOUNTNUM NUMBER,
    --제약조건
		CONSTRAINT BANKTRADE_TRADENUM_PK PRIMARY KEY (TRADENUM),
    CONSTRAINT BANKTRADE_ACCOUNTNUM_FK FOREIGN KEY (ACCOUNTNUM) REFERENCES BANKACCOUNT
)




--테이블(회원, 통장정보, 개설정보, 거래내역)
CREATE TABLE BANKMEMBERS (
ID VARCHAR2(200) CONSTRAINT MEMBERS_ID_PK PRIMARY KEY,
PW VARCHAR2(200) CONSTRAINT MEMBERS_PW_NN NOT NULL,
Name VARCHAR2(200) CONSTRAINT MEMBERS_NAME_NN NOT NULL,
Email VARCHAR2(200) CONSTRAINT MEMBERS_EMAIL_NN NOT NULL,
Phone VARCHAR2(200) CONSTRAINT MEMBERS_PHONE_NN NOT NULL,

CONSTRAINT MEMBERS_Email_U UNIQUE (Email),
CONSTRAINT MEMBERS_PHONE_U UNIQUE (Phone)
);

CREATE TABLE BANKBOOK (
BookNum NUMBER CONSTRAINT BOOK_BOOKNUM_PK PRIMARY KEY,
BookName VARCHAR2(200) CONSTRAINT BOOK_BOOKNAME_NN NOT NULL,
BookRate NUMBER(4,2) CONSTRAINT BOOK_BOOKRATE_NN NOT NULL,
BookSale NUMBER(1) CONSTRAINT BOOK_BOOKSALE_NN NOT NULL,

CONSTRAINT BOOK_BOOKRATE_C CHECK (BookRate >= 0)
);

CREATE TABLE BANKACCOUNT (
AccountNum NUMBER CONSTRAINT ACCOUNT_ACCOUNTNUM_PK PRIMARY KEY,
UserID VARCHAR2(200) CONSTRAINT ACCOUNT_USERID_NN NOT NULL,
BookNum NUMBER CONSTRAINT ACCOUNT_BOOKNUM_NN NOT NULL,
AccountDate DATE CONSTRAINT ACCOUNT_ACCOUNTDATE_NN NOT NULL,

CONSTRAINT ACCOUNT_USERID_FK FOREIGN KEY (UserID) REFERENCES BANKMEMBERS (ID),
CONSTRAINT ACCOUNT_BOOKNUM_FK FOREIGN KEY (BookNum) REFERENCES BANKBOOK (BookNum)
);

CREATE TABLE BANKTRADE (
TradeNum NUMBER CONSTRAINT TRADE_TRADENUM_PK PRIMARY KEY,
TradeAmount NUMBER CONSTRAINT TRADE_TRADEAMOUNT_NN NOT NULL,
TradeBalance NUMBER CONSTRAINT TRADE_TRADEBALANCE_NN NOT NULL,
TradeDate DATE CONSTRAINT TRADE_TRADEDATE_NN NOT NULL,
TradeIO NUMBER(1) CONSTRAINT TRADE_TRADEIO_NN NOT NULL,
AccountNum NUMBER CONSTRAINT TRADE_ACCOUNTNUM_NN NOT NULL,

CONSTRAINT TRADE_TRADEAMOUNT_C CHECK (TradeAmount > 0),
CONSTRAINT TRADE_TRADEBALANCE_C CHECK (TradeBalance >= 0),
CONSTRAINT TRADE_ACCOUNTNUM_FK FOREIGN KEY (AccountNum) REFERENCES BANKACCOUNT (AccountNum)
);