SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'MEMBER';

CREATE TABLE MEMBER(
--제약 조건 이름: 테이블명_칼럼명_제약조건약어
--컬럼명 데이터타입
ID VARCHAR2(20) CONSTRAINT MEMBER_ID_PK PRIMARY KEY, --아이디
PW VARCHAR2(20),--CONSTRAINT MEMBER_PW_NN NOT NULL, --아이디, --비번  
NAME VARCHAR2(100),--DEFAULT 'NAME', --이름
PHONE VARCHAR(20),-- CONSTRAINT MEMBER_PHONE_U UNIQUE, --전화번호
AGE NUMBER(3),-- CONSTRAINT CHECK (AGE >= 0 and AGE<=150),--999
CONSTRAINT MEMBER_ID_PK PRIMARY KEY(ID),
CONSTRAINT MEMBER_PHONE_U UNIQUE(PHONE),
CONSTRAINT MEMBER_AGE_C CHECK (AGE BETWEEN 0 AND 150)
);

DROP TABLE MEMBER; 
SELECT * FROM TAB;
SELECT * FROM MEMBER;
DESC MEMBER;
INSERT INTO MEMBER VALUES('SOLHEE','753951','전솔희','010-9510-0258',20);
INSERT INTO MEMBER VALUES('HAJUN','QWEWQEASDAS21213','전하준','010-9510-0258',25);

-- TABLE : POINT
-- 이름, 번호, 국어, 영어, 수학, 총점, 평균 (소숫점 2자리)
CREATE TABLE POINT(
NUM NUMBER
NAME VARCHAR2(30),
NUM NUMBER(3),
KOR NUMBER(3),
ENG NUMBER(3),
MATH NUMBER(3),
TOTAL NUMBER(3),
AVG NUMBER(3)
);
SELECT * FROM POINT;
INSERT INTO POINT VALUES('전솔희',1,70,80,90,240,80);
INSERT INTO POINT VALUES('전하준',2,80,90,100,270,90);
INSERT INTO POINT VALUES('윤성미',3,90,100,100,290,96.67);
INSERT INTO POINT VALUES('윤성하',3,90,100,100,290,96.667);
--조건변경,테이블삭제,NUMBER(5,2),총점,평균자동계산
DROP TABLE POINT;


CREATE TABLE STUDENT(
ID VARCHAR2(20) CONSTRAINT STUDENT_ID_PK PRIMARY KEY, --아이디
PW VARCHAR2(20) CONSTRAINT STUDENT_PW_NN NOT NULL, --아이디, --비번  
NAME VARCHAR2(100) DEFAULT 'NAME', --이름
PHONE VARCHAR(20) CONSTRAINT STUDENT_PHONE_U UNIQUE, --전화번호
AGE NUMBER(3) CONSTRAINT STUDENT_AGE_CHECK (AGE >= 0 and AGE<=150),--999
);
CREATE TABLE POINTS(
NUM NUMBER,
ID VARCHAR2(20) CONSTRAINT POINTS_ID_FK REFERENCES STUDENT (ID),
KOR NUMBER(3),
ENG NUMBER(3),
MATH NUMBER(3),
TOTAL NUMBER(3),
AVG NUMBER(5,2)
);
--번호, 제목, 작성자,등록날짜, 내용, 조회수
CREATE TABLE BOARD(
NUM NUMBER(4) CONSTRAINT BOARD_NUM_PK PRIMARY KEY,--PK
TITLE VARCHAR2(200) CONSTRAINT BOARD_TITLE_NN NOT NULL,--NN
WRITER VARCHAR2(20),--FK
WRITEDATE DATE,--X
CONTENT VARCHAR2(4000),--X
HITS NUMBER --X
);
SELECT * FROM BOARD;-----테이블 조회
SELECT * FROM TAB;
DESC BOARD;
INSERT INTO BOARD VALUES(1,'날씨 예보','전솔희','22/08/01','오늘은 비가 많이올것으로 예상됩니다...',0);
INSERT INTO BOARD VALUES(2,'주식 정보','전하준','22/08/02','주가가 급반등 할것으로 예상됩니다...',0);
INSERT INTO BOARD VALUES(3,'...','정은희',SYSDATE,'...',0);
SELECT * FROM RECYCLEBIN; 
PURGE RECYCLEBIN;
DROP TABLE BOARD;
SELECT * FROM BOARD;-----테이블 조회
--------------------1번글의 조회수를 127로 수정---------------
UPDATE BOARD SET HITS = 127 WHERE NUM = 1;

--------------------BOARD 테이블의 모든 ROW의 HIT를 각각 1씩 증가하도록 수정---------------
UPDATE BOARD SET HITS = HITS+1;

--------------------BOARD테이블에서 모든 ROW 삭제---------------------------------------
DELETE BOARD WHERE 1=1;

------------------------ MEMBER에서 로그인 진행 ----------------------------
SELECT * FROM MEMBER WHERE ID = 'SOLHEE' AND PW = '753951';
SELECT * FROM MEMBER WHERE ID = 'SOLHEE' AND PW = '1 OR 1 = 1';
ROLLBACK;
SELECT * FROM TAB;

---------------0802---------------------------------------
SELECT * FROM RECYCLEBIN;
SELECT * FROM TAB;
PURGE RECYCLEBIN;
ROLLBACK;
DROP TABLE BOARD;
DROP TABLE MEMBER;

CREATE TABLE MEMBER(
--제약 조건 이름: 테이블명_칼럼명_제약조건약어
--컬럼명 데이터타입
ID VARCHAR2(20) CONSTRAINT MEMBER_ID_PK PRIMARY KEY, --아이디
PW VARCHAR2(20),--CONSTRAINT MEMBER_PW_NN NOT NULL, --아이디, --비번  
NAME VARCHAR2(100),--DEFAULT 'NAME', --이름
PHONE VARCHAR(20),-- CONSTRAINT MEMBER_PHONE_U UNIQUE, --전화번호
AGE NUMBER(3)-- CONSTRAINT CHECK (AGE >= 0 and AGE<=150),--999
);
INSERT INTO MEMBER VALUES('JUNSOLHEE',753951,'전솔희','01095100258',20);
INSERT INTO MEMBER VALUES('JEONHAJUN',8739,'전하준','01095100258',25);
SELECT * FROM MEMBER; --MEMBER TABLE 조회

--------------숫자가 들어갈 LEVEL 칼럼 추가
ALTER TABLE MEMBER ADD (KIND NUMBER(2));
UPDATE MEMBER SET KIND=1 WHERE ID='JUNSOLHEE';
UPDATE MEMBER SET KIND=2 WHERE ID='JEONHAJUN';

--------------NAME 칼럼 삭제---------------------
ALTER TABLE MEMBER DROP COLUMN NAME;

--------------칼럼명 변경--------------------
SELECT * FROM MEMBER; --MEMBER TABLE 조회

ALTER TABLE MEMBER RENAME COLUMN KIND TO ROLE;

-------------데이터타입 변경 NUMBER->VARCHAR(2)-------------------
DESC MEMBER;
SELECT * FROM MEMBER;
UPDATE MEMBER SET ROLE=NULL;
ALTER TABLE MEMBER MODIFY ROLE VARCHAR2(100);
UPDATE USERS SET ROLE='검사' WHERE ID='JEONHAJUN';

--------테이블명 변경 MEMBER->USER-----------
RENAME MEMBER TO USERS;
SELECT * FROM USERS;

---------ROLE 칼럼에 NOT NULL 제약조건 추가---------
DESC USERS;
ALTER TABLE USERS ADD CONSTRAINT USERS_ROLE_U UNIQUE (ROLE);
INSERT INTO USERS VALUES('ID6','PW4','01044444444',TEST_SEQ.NEXT,'USERS');
ALTER TABLE USERS DROP CONSTRAINT USERS_ROLE_U;

SELECT * FROM USERS;

-----------------테이블명 MEMBER_TBL------------
CREATE SEQUENCE test_seq;
--INCREMENT BY 1
--START WITH 1
--NOMAXVALUE
--NOCYCLE
--NOCACHE

SELECT * FROM SEQ;

SELECT TEST_SEQ.NEXTVAL FROM  DUAL;

SELECT TEST_SEQ.CURRVAL FROM DUAL;
DROP SEQUENCE TEST_SEQ;
-----------------
CREATE TABLE MEMBER(
--제약 조건 이름: 테이블명_칼럼명_제약조건약어
--컬럼명 데이터타입
ID VARCHAR2(20) CONSTRAINT BOARD PRIMARY KEY, --아이디
PW VARCHAR2(20),--CONSTRAINT MEMBER_PW_NN NOT NULL, --아이디, --비번  
NAME VARCHAR2(100),--DEFAULT 'NAME', --이름
PHONE VARCHAR(20),-- CONSTRAINT MEMBER_PHONE_U UNIQUE, --전화번호
AGE NUMBER(3)-- CONSTRAINT CHECK (AGE >= 0 and AGE<=150),--999
);
SELECT * FROM USERS;
SELECT * FROM BOARD;
SELECT * FROM TAB;
INSERT INTO BOARD VALUES('ID7','PW7','010777',20,'USER');
DROP TABLE USERS;
SELECT * FROM RECYCLEBIN;
PURGE RECYCLEBIN;

SELECT * FROM TAB;
DESC BANKBOOK;
SELECT * FROM RECYCLEBIN;
PURGE RECYCLEBIN;

---------------------------BANKBOOK(1)----------------------------------------------
CREATE TABLE BANKBOOK(
BOOKNUM NUMBER DEFAULT(1) CONSTRAINT BANKBOOK_BOOKNUM_NN NOT NULL,
BOOKNAME VARCHAR2(200),
BOOKRATE NUMBER(4,2),
BOOKSALE NUMBER(1)
);
ALTER TABLE BANKBOOK ADD CONSTRAINT BANKBOOK_BOOKNUM_PK PRIMARY KEY (BOOKNUM);
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'BANKBOOK';
SELECT * FROM BANKBOOK;
DROP TABLE BANKBOOK;
DELETE BANKBOOK;
DESC BANKBOOK;
INSERT INTO BANKBOOK VALUES(2,'적금',3,0);

---------------------------BANKTRADE(2)----------------------------------------------
CREATE TABLE BANKTRADE(
TRADENUM NUMBER CONSTRAINT BANKTRADE_TRADENUM_NN NOT NULL,
TRADEACCOUNT NUMBER,
TRADEBALLANCE NUMBER,
TRADEDATE DATE,
TRADEIO NUMBER,
ACCOUNTNUM NUMBER
);
ALTER TABLE BANKTRADE ADD CONSTRAINT BANKTRADE_TRADENUM_PK PRIMARY KEY (TRADENUM);
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'BANKTRADE';
SELECT * FROM BANKTRADE;
DROP TABLE BANKTRADE;
DESC BANKTRADE;
INSERT INTO BANKTRADE VALUES(2, 2500000, 1500000, SYSDATE, 1, 321928);
ALTER TABLE BANKTRADE ADD CONSTRAINT BANKTRADE_ACCOUNTNUM_FK FOREIGN KEY (ACCOUNTNUM) REFERENCES BANKACCOUNT (ACCOUNTNUM);

---------------------------BANKACCOUNT(3)----------------------------------------------
CREATE TABLE BANKACCOUNT(
ACCOUNTNUM NUMBER CONSTRAINT BANKACCOUNT_ACCOUNTNUM_NN NOT NULL,
USERNAME VARCHAR2(200),
BOOKNUM NUMBER,
ACCOUNTDATE DATE
);
ALTER TABLE BANKACCOUNT ADD CONSTRAINT BANKACCOUNT_ACCOUNTNUM_PK PRIMARY KEY (ACCOUNTNUM);
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'BANKACCOUNT';
SELECT * FROM BANKACCOUNT;
DROP TABLE BANKACCOUNT;
ALTER TABLE BANKACCOUNT ADD CONSTRAINT BANKACCOUNT_USERNAME_FK FOREIGN KEY (USERNAME) REFERENCES BANKMEMBERS (USERNAME);

---------------------------BANKMEMBER(4)----------------------------------------------
CREATE TABLE BANKMEMBERS(
USERNAME VARCHAR2(200) CONSTRAINT BANKMEMBERS_USERNAME_NN NOT NULL,
PASSWORD VARCHAR2(200),
NAME VARCHAR2(200),
EMAIL VARCHAR2(200),
PHONE VARCHAR2(200)
);
ALTER TABLE BANKMEMBERS ADD CONSTRAINT BANKMEMBERS_USERNAME_PK PRIMARY KEY (USERNAME);
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKMEMBERS';
SELECT * FROM TAB;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKBOOK' OR TABLE_NAME='BANKTRADE' OR TABLE_NAME='BANKACCOUNT' OR TABLE_NAME='BANKMEMBERS';
DROP TABLE BANKMEMBERS;
----------------------------------------------------------------------------------------

SELECT * FROM BANKMEMBERS;
DESC BANKMEMBERS;
DELETE BANKMEMBERS;
TRUNCATE TABLE BANKMEMBERS;
INSERT INTO BANKMEMBERS VALUES('JeonHaJun','1234','전하준','junsolhee7@naver.com','010-9510-0258');
SELECT * FROM RECYCLEBIN;
PURGE RECYCLEBIN;

SELECT * FROM BANKMEMBERS WHERE USERNAME LIKE '%소혼%';

----------------------BOOKDAO----------------------------------------
SELECT * FROM TAB;
SELECT * FROM BANKBOOK;
SELECT * FROM BANKBOOK WHERE BOOKNUM=0;
SELECT * FROM BANKBOOK ORDER BY BOOKNUM DESC;
DELETE BANKBOOK;
PURGE RECYCLEBIN;
DESC BANKBOOK;
INSERT INTO BANKBOOK VALUES(1,'Hajun1',1,0);
INSERT INTO BANKBOOK VALUES(2,'Hajun2',2,0);
INSERT INTO BANKBOOK VALUES(3,'Hajun3',3,0);
INSERT INTO BANKBOOK VALUES(4,'Hajun4',4,0);
INSERT INTO BANKBOOK VALUES(5,'Hajun5',5,0);
SELECT * FROM BANKBOOK ORDER BY BOOKNUM DESC;
SELECT * FROM BANKBOOK;
UPDATE BANKBOOK SET BOOKNAME='HAJUN', BOOKRATE='7' WHERE BOOKNUM=0;
UPDATE BANKBOOK SET BOOKNAME=12, BOOKRATE=12 WHERE BOOKNUM=6;
COMMIT;
INSERT INTO BANKBOOK VALUES(1,21,21,0);
delete bankbook where bookrate in (22,69,99,77,76,71);
delete bankbook where BOOKNUM=?;
SELECT * FROM BANKMEMBERS;
DELETE BANKMEMBERS;
insert into bankmembers values('다크',123,1323,'sadf@asfsd',010231321);
commit;
select * from bankmembers where password=(select password from bankmembers where username='제이스');
select password from bankmembers where username='제이스';
update bankmembers set password = '1234' where username='바드';

SELECT USERNAME, NAME FROM BANKMEMBERS WHERE USERNAME='제이스' AND PASSWORD='1234';
SELECT * FROM TAB;



SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKBOOK';
DESC BANKBOOK;
SELECT * FROM BANKACCOUNT;
SELECT * FROM BANKBOOK;

--------정수형자동생성------
CREATE SEQUENCE ACCOUNT_SEQ;
SELECT * FROM SEQ;
SEQ.NEXTVAR;
DELETE BANKACCOUNT;


INSERT INTO BANKACCOUNT VALUES(ACCOUNT_SEQ.NEXTVAL,'알리',3,SYSDATE);
INSERT INTO BANKACCOUNT VALUES(5,'트위치',1660194312657,SYSDATE);
1660194312657
SELECT * FROM BANKMEMBERS;
DESC BANKACCOUNT;
COMMIT;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKACCOUNT';
SELECT * FROM BANKACCOUNT;
DELETE FROM BANKACCOUNT WHERE ACCOUNTNUM=7;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKACCOUNT';
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKBOOK';
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='BANKMEMBERS';
alter table BANKBOOK add foreign key 'BANKBOOK_BOOKNUM_FK'  references 'BANKACCOUNT' 'BOOKNUM'; 
alter table ids_info add product_id int(100) not null;
-------------로그인한사용자가 가입한 상품의 이름과 이자율,가입날짜 조회--------
SELECT * FROM BANKMEMBERS;
SELECT * FROM BANKACCOUNT;
SELECT * FROM BANKBOOK;
SELECT BOOKNAME,BOOKRATE FROM BANKBOOK WHERE IN ('SUBQUERY');
SELECT BOOKNUM FROM BANKACCOUNT WHERE USERNAME = '제이스';

SELECT B.BOOKNAME, B.BOOKRATE, A.ACCOUNTDATE
FROM BANKBOOK B
    INNER JOIN
    BANKACCOUNT A
    --ON B.BOOKNUM=A.BOOKNUM
    USING(BOOKNUM)
WHERE A.USERNAME='제이스';    










-------------------------------------------------------------------------------------------------------------------
6. Employees 테이블에서 LAST_NAME이 Greenberg 사원보다 급여를 더 많이 받고 있는 사원들정보 출력
--------------------   실습 6번 -----------------------------------------------------
SELECT * FROM EMPLOYEES WHERE SALARY >
    (SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME ='Greenberg')
;
----------------------------------------------------------------------------------------
7. 부서별 최소급여를 받고 있는 사원의 정보 출력
SELECT *
FROM employees
WHERE salary IN
    (SELECT MIN(salary) FROM employees GROUP BY department_id);
-----------------------------------------------------------------------------------------

8. 도시이름이 'S'로시작하는 지역에 근무하는 사원의 정보 출력	
select * from employees where department_id in
    (select department_id FROM departments where location_id in
        (select location_id from locations where city like 'S%')
    );
-------------------------------------------------------------------------
9. 성이 Austin 사원의 매니저(상사)가 근무하는 부서의 평균 급여보다 부서평균이 더 큰 부서의 이름
SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN 
    (SELECT DEPARTMENT_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID HAVING AVG(SALARY)>
     (SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 
        (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME ='Austin'
         )
        )
    );
----------------------------------------------------------------------------------------